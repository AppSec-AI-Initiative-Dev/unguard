
name: Build and Push Docker Images to ECR

permissions:
  id-token: write
  contents: read
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
  # No need to set AWS_REGION and ECR_REPOSITORY as env variables for OIDC; use secrets directly in steps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Derive short SHA image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ECR_ROLE_ARN }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker images (skip if exists)
        env:
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Build umbrella unguard image (root Dockerfile) first
          if [ -f Dockerfile ]; then
            UMBRELLA_IMAGE="${ECR_REPOSITORY}:unguard-${IMAGE_TAG}"
            if aws ecr describe-images --repository-name "$(echo $ECR_REPOSITORY | awk -F/ '{print $2}')" --image-ids imageTag="unguard-${IMAGE_TAG}" >/dev/null 2>&1; then
              echo "Umbrella image unguard-${IMAGE_TAG} already exists, skipping build."
            else
              docker build -t "$UMBRELLA_IMAGE" -f Dockerfile .
              docker push "$UMBRELLA_IMAGE"
            fi
          fi

          for dockerfile in $(find ./src -name Dockerfile); do
            SERVICE=$(basename $(dirname $dockerfile))
            IMAGE_URI="${ECR_REPOSITORY}:${SERVICE}-${IMAGE_TAG}"
            REPO_NAME=$(echo $ECR_REPOSITORY | awk -F/ '{print $2}')
            if aws ecr describe-images --repository-name "$REPO_NAME" --image-ids imageTag="${SERVICE}-${IMAGE_TAG}" >/dev/null 2>&1; then
              echo "Image ${SERVICE}-${IMAGE_TAG} already exists, skipping build."
            else
              docker build -t $IMAGE_URI -f $dockerfile $(dirname $dockerfile)
              docker push $IMAGE_URI
            fi
          done

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Log in to GHCR
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          set -e
          if [ -n "$GHCR_PAT" ]; then
            echo "Using GHCR_PAT secret for login";
            echo "$GHCR_PAT" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          else
            echo "Using default GITHUB_TOKEN for login";
            echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          fi

      - name: Prepare Helm chart metadata
        run: |
          BASE_VERSION=$(yq '.version' chart/Chart.yaml)
          PRERELEASE_VERSION="${BASE_VERSION}-${IMAGE_TAG}"
          APP_VERSION="${BASE_VERSION}+${IMAGE_TAG}"
          yq -i ".version=\"${PRERELEASE_VERSION}\" | .appVersion=\"${APP_VERSION}\"" chart/Chart.yaml
          echo "CHART_VERSION=${PRERELEASE_VERSION}" >> $GITHUB_ENV
          # Determine GHCR namespace
          if [ -n "${{ secrets.GHCR_NAMESPACE }}" ]; then
            NS_RAW='${{ secrets.GHCR_NAMESPACE }}'
          else
            NS_RAW='${{ github.repository }}'
          fi
          NS_LC=$(echo "$NS_RAW" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_PUSH_NAMESPACE=$NS_LC" >> $GITHUB_ENV
      - name: Package Helm chart
        run: helm package chart

      - name: Debug chart push context
        run: |
          echo "github.repository_owner=${{ github.repository_owner }}"
          echo "github.repository=${{ github.repository }}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "Chart.yaml:" && cat chart/Chart.yaml
          ls -1 unguard-*.tgz || echo "No packaged chart found"

      - name: Push Helm chart to GHCR
        env:
          CHART_VERSION: ${{ env.CHART_VERSION }}
          GHCR_PUSH_NAMESPACE: ${{ env.GHCR_PUSH_NAMESPACE }}
        run: |
          set -e
          echo "GHCR namespace: $GHCR_PUSH_NAMESPACE"
          ORG_LC="$GHCR_PUSH_NAMESPACE"
          echo "Chart package: unguard-${CHART_VERSION}.tgz"
          echo "Push target: oci://ghcr.io/${ORG_LC}"
          helm push unguard-${CHART_VERSION}.tgz oci://ghcr.io/${ORG_LC}
